{"version":3,"sources":["assets/london.JPG","assets/showa2.JPG","assets/paris.JPG","assets/sapporo.JPG","constants/English.ts","constants/Japanese.ts","components/ChangingImage/ChangingImage.tsx","MainPage/MainPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","englishConstants","myName","content","japaneseConstants","images","require","ChangingImage","React","currentImageIndex","setCurrentImageIndex","intervalId","setInterval","length","clearInterval","src","alt","className","MainPage","language","setLanguage","isEnglish","constants","href","icon","size","onClick","App","library","add","fab","faLanguage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mLAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,2HCE9BC,EAA8B,CACvCC,OAAQ,6BACRC,QAAQ,4aCFCC,EAA+B,CACxCF,OAAO,2GACPC,QAAQ,8wCCENE,EAAS,CALAC,EAAS,IACVA,EAAS,IACTA,EAAS,IACPA,EAAS,KAIZC,EAAgB,WAAO,IAAD,EACmBC,WAAuB,GAD1C,mBACxBC,EADwB,KACLC,EADK,KAS/B,OAPAF,aAAgB,WACZ,IAAMG,EAAaC,aAAY,WAC3BF,EAAuBD,EAAoB,EAAMJ,EAAOQ,OAAWJ,EAAoB,EAAI,KAC5F,KACH,OAAO,kBAAMK,cAAcH,MAC1B,CAACF,IAGF,uBAAKM,IAAKV,EAAOI,GAAoBO,IAAK,mBAAoBC,UAAW,oBCbpEC,EAAW,WAAO,IAAD,EACMV,WHIjB,OGLW,mBACnBW,EADmB,KACTC,EADS,KAEpBC,EHGS,QGHGF,EACZG,EAAYD,EAAYpB,EAAmBG,EACjD,OACI,uBAAKa,UAAU,aACX,uBAAKA,UAAU,gBACX,gBAAC,EAAD,OAEJ,uBAAKA,UAAU,iBACX,uBAAKA,UAAU,YACX,qBAAGM,KAAK,2DAA0D,gBAAC,IAAD,CAAiBC,KAAM,CAAC,MAAO,YAAaC,KAAM,KAAMR,UAAU,UACpI,qBAAGM,KAAK,+BAA8B,gBAAC,IAAD,CAAiBC,KAAM,CAAC,MAAO,UAAWC,KAAM,KAAMR,UAAU,UACtG,gBAAC,IAAD,CAAiBO,KAAK,WAAWC,KAAM,KAAMR,UAAU,OAAOS,QAAS,WAAoBN,EAAZC,EAAwB,MHRxG,UGSC,wBAAMJ,UAAU,kBAAkBI,EAAY,qBHT/C,QGWH,sBAAIJ,UAAU,SAASK,EAAUpB,QACjC,uBAAKe,UAAU,WACVK,EAAUnB,YCPhBwB,MATf,WAEE,OADAC,IAAQC,IAAIC,IAAKC,KAEf,yBAAKd,UAAU,OACb,kBAAC,EAAD,QCCce,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ed3b8a6d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/london.a5e1e492.JPG\";","module.exports = __webpack_public_path__ + \"static/media/showa2.4303d6d8.JPG\";","module.exports = __webpack_public_path__ + \"static/media/paris.aea2990e.JPG\";","module.exports = __webpack_public_path__ + \"static/media/sapporo.02b4b471.JPG\";","import { Constants } from '../models';\n\nexport const englishConstants: Constants = {\n    myName: 'Margaret (Maggie) Jennings',\n    content: `Hi, I'm Maggie and I'm currently a Software Developer at Wellington Management.\n    I studied Computer Science and Japanese Language and Culture at Wellesley College, where I was also a member of Wellesley Aiko.\n    I also studied abroad at International Christian University in Mitaka, Tokyo. \n    In terms of programming, I have two years of working experience in TypeScript and building web applications with React.js.`\n};\n\nexport const ENG = 'ENG';","import { Constants } from '../models';\n\nexport const japaneseConstants: Constants = {\n    myName: `マーガレット （マギー） ジェニングス`,\n    content: `はじめまして、マーガレットと申します。 現在ボストンでウエリントン・マネージメントでソフトウェアデベロッパーとして働いております。\n    ウェルズリー大学でコンピューターサイエンスと日本語を専攻にして勉強しました。大学3年の秋、日本語を勉強するため国際基督教大学に留学しました。\n    今の仕事で使っておるプログラミング言語は、TypeScriptです。主にウェブアップリケーションの開発をし、Rest APIの開発もたまにしております。（TypeScriptで）\n    よろしくお願いいたします。`\n};\n\nexport const JPN = 'JPN';","import * as React from 'react';\nconst london = require( '../../assets/london.JPG');\nconst showa = require( '../../assets/showa2.JPG');\nconst paris = require( '../../assets/paris.JPG');\nconst sapporo = require( '../../assets/sapporo.JPG');\n\nconst images = [london, showa, paris, sapporo];\n\nexport const ChangingImage = () => {\n    const [currentImageIndex, setCurrentImageIndex] = React.useState<number>(0);\n    React.useEffect(() => {\n        const intervalId = setInterval(() => {\n            setCurrentImageIndex(((currentImageIndex + 1) < (images.length)) ? currentImageIndex + 1 : 0);\n        }, 10000);    \n        return () => clearInterval(intervalId);\n      }, [currentImageIndex]);\n\n    return (\n        <img src={images[currentImageIndex]} alt={'Maggie Traveling'} className={'changing-image'} />\n    );\n}","import * as React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { englishConstants, japaneseConstants, ENG } from '../constants';\nimport { ChangingImage } from '../components';\n\nexport const MainPage = () => {\n    const [language, setLanguage] = React.useState<'ENG' | 'JPN'>(ENG);\n    const isEnglish = language === ENG;\n    const constants = isEnglish ? englishConstants : japaneseConstants;\n    return (\n        <div className='main-page'>\n            <div className='left-content'>\n                <ChangingImage />\n            </div>\n            <div className='right-content'>\n                <div className='icon-bar'>\n                    <a href='https://www.linkedin.com/in/margaret-jennings-237626106'><FontAwesomeIcon icon={['fab', 'linkedin']} size={'2x'} className='icon'/></a>\n                    <a href='https://github.com/mmjenjen'><FontAwesomeIcon icon={['fab', 'github']} size={'2x'} className='icon'/></a>\n                    <FontAwesomeIcon icon='language' size={'2x'} className='icon' onClick={() => { isEnglish ? setLanguage('JPN') : setLanguage(ENG); }}/>\n                    <span className='language-label'>{isEnglish ? '日本語' : ENG}</span>\n                </div>\n                <h1 className='title'>{constants.myName}</h1>\n                <div className='content'>\n                    {constants.content}\n                </div>\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faLanguage } from '@fortawesome/free-solid-svg-icons';\nimport { fab } from '@fortawesome/free-brands-svg-icons';\nimport './App.css';\nimport { MainPage } from './MainPage';\n\nfunction App() {\n  library.add(fab, faLanguage);\n  return (\n    <div className=\"App\">\n      <MainPage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}